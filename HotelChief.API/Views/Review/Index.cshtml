@model HotelChief.API.ViewModels.ReviewViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@inject IHtmlLocalizer<HotelChief.API.SharedResource> SharedLocalizer
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" integrity="sha384-hvvZLlzM5yBhTBSH86xjw56Zmk7IlAy9S4CiEoM87qroJEqUOVfrtiGn4F5sD4Vb" crossorigin="anonymous">
    <link rel="stylesheet" href="~/font-awesome-4.7.0/css/font-awesome.min.css" />
</head>
@{
    ViewData["Title"] = @Localizer["Review page"];
}
<div class="warning">
    @TempData["ErrorMessage"]
</div>
<div class="success">
    @TempData["SuccessMessage"]
</div>
<div class="row">
    <div class="col-md-4">
        <form asp-action="AddReview" method:post>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label class="control-label">@Localizer["Review content"]</label>
                @Html.TextAreaFor(m => m.Comment, new { Class="comment-body", rows="3", cols="50" })
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">@Localizer["Rating"]</label>
                <div class="rating">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <span class="star" data-rating="@i">&#9733;</span>
                    }
                    @Html.HiddenFor(m => m.Rating, new { @class = "rating-value" })
                </div>
             </div>
            <div class="form-group">
                <input type="submit" value="@Localizer["Share review"]" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@{

    if (TempData["commentOwnership"] != null)
    {

        bool[] commentOwnership = (bool[])TempData["commentOwnership"];
        int i = 0;
        foreach (var item in Model.Reviews)
        {
            <div class="card">
                <div class="row d-flex">
                    <div class="d-flex flex-column">
                        <h6 class="mt-2 mb-0"> @Html.DisplayFor(modelItem => item.GuestEmail)    </h6>
                    </div>
                    <div class="ml-auto">
                        <p class="text-muted pt-5 pt-sm-3"> @Html.DisplayFor(modelItem => item.Timestamp)    </p>
                    </div>
                </div>
                <div class="boxSize">
                    <p class="content"> @Html.DisplayFor(modelItem => item.Comment)    </p>
                </div>
                <div class="rating read-only" id="rating-@item.ReviewId">
                    @for (int n = 1; n <= 5; n++)
                    {
                        <span class="star @(n <= item.Rating ? "active" : "")" data-value="@n">&#9733;</span>
                    }
                    @Html.HiddenFor(modelItem => item.Rating, new { @class = "rating-value" })
                </div>

                <div class="thumbs-up" onclick="upvote(@item.ReviewId, @item.Upvotes, @item.Downvotes)">
                    <i class="fa fa-thumbs-up" id="upvotes-@item.ReviewId"> @item.Upvotes</i>
                    <span>Upvote</span>
                </div>

                <div class="thumbs-down" onclick="downvote(@item.ReviewId, @item.Upvotes, @item.Downvotes)">
                    <i class="fa fa-thumbs-down" id="downvotes-@item.ReviewId">@item.Downvotes</i>
                    <span>Downvote</span>
                </div>
                @if (commentOwnership[i] == true || User.FindFirst("IsAdmin").Value == "true")
                {
                    <form asp-action="Delete">
                        <div class="form-group">
                            <input type="hidden" name="commentId" value="@item.ReviewId" />
                            <input type="submit" value="@SharedLocalizer["Delete"]" class="btn btn-outline-primary" />
                        </div>
                    </form>
                }
                @{
                    i = i + 1;
                }

            </div>
        }
    }
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.9/signalr.min.js"></script>
<script>

    const connection = new signalR.HubConnectionBuilder().withUrl("/reviewHub").build();

    connection.start().catch(err => console.error(err.toString()));

    connection.on("UpdateVotes", function (reviewId, upvotes, downvotes) {
        const upvotesElement = document.getElementById(`upvotes-${reviewId}`);
        const downvotesElement = document.getElementById(`downvotes-${reviewId}`);

        if (upvotesElement && downvotesElement) {
            upvotesElement.textContent = `${upvotes}`;
            downvotesElement.textContent = `${downvotes}`;
        }
    });

    function upvote(reviewId, currentUpvotes, currentDownvotes) {
        $.ajax({
            url: `/Review/Upvote?reviewId=${reviewId}`,
            type: 'POST',
            success: function () {
               
            },
            error: function (error) {
                console.error('Error during upvote:', error);
            }
        });
    }

    function downvote(reviewId, currentUpvotes, currentDownvotes) {
        $.ajax({
            url: `/Review/Downvote?reviewId=${reviewId}`,
            type: 'POST',
            success: function () {
               
            },
            error: function (error) {
                console.error('Error during downvote:', error);
            }
        });
    }
</script>
<style>
    body {
        color: #000;
        overflow-x: hidden;
    }

    .card {
        border-radius: 5px;
        background-color: #fff;
        padding-left: 60px;
        padding-right: 60px;
        margin-top: 30px;
        padding-top: 30px;
        padding-bottom: 30px;
    }

    td {
        padding-bottom: 10px;
    }

    .content {
        font-size: 18px;
        overflow-wrap: break-word;
    }

    div.boxSize {
        width: auto;
        text-align: left !important;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .warning {
        color: #9F6000;
        background-color: #FEEFB3;
    }

    .success {
        color: #4F8A10;
        background-color: #DFF2BF;
    }

    .rating {
        font-size: 24px;
    }

    .star {
        cursor: pointer;
    }

        .star:hover,
        .star.active {
            color: gold;
        }

    .thumbs-up.hovered {
        cursor: pointer;
        color: green; 
    }

    .thumbs-down.hovered{
        cursor: pointer;
        color: red;
    }
</style>
<script>
    $(document).ready(function () {
        $('.rating').each(function () {
            var containerId = $(this).attr('id');

            if (!$(this).hasClass('read-only')) {
                // Attach events only for non-read-only stars
                $('#' + containerId + ' .star').on('mouseenter', function () {
                    var value = $(this).data('value');
                    highlightStars(value, containerId);
                });

                $('#' + containerId + ' .star').on('mouseleave', function () {
                    var value = $('#' + containerId + ' .rating-value').val();
                    highlightStars(value, containerId);
                });

                $('#' + containerId + ' .star').on('click', function () {
                    var value = $(this).data('value');
                    $('#' + containerId + ' .rating-value').val(value);
                    highlightStars(value, containerId);
                });
            }
        });

        function highlightStars(value, containerId) {
            $('#' + containerId + ' .star').removeClass('active');
            $('#' + containerId + ' .star').each(function () {
                if ($(this).data('value') <= value) {
                    $(this).addClass('active');
                }
            });
        }
    });
</script>

<script>
    $(document).ready(function () {
        $('.col-md-4 .star').click(function () {
            var rating = $(this).data('rating');
            $(this).closest('.col-md-4').find('.rating-value').val(rating);
            highlightStars($(this).closest('.rating'), rating);
        });

        function highlightStars(container, rating) {
            container.find('.star').removeClass('active');
            container.find('.star:lt(' + rating + ')').addClass('active');
        }
    });
</script>
<script>
$('.thumbs-up, .thumbs-down').hover(
        function () {
            $(this).addClass('hovered');
        },
        function () {
            $(this).removeClass('hovered');
        }
    );
</script>




