@model HotelChief.API.ViewModels.ReviewViewModel
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@inject IHtmlLocalizer<HotelChief.API.SharedResource> SharedLocalizer

@{
    ViewData["Title"] = @Localizer["Review page"];
}
<div class="warning">
    @TempData["ErrorMessage"]
</div>
<div class="success">
    @TempData["SuccessMessage"]
</div>

<div class="row">
    <div class="col-md-4">
        <form asp-action="AddReview" method:post>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label class="control-label">@Localizer["Review content"]</label>
                @Html.TextAreaFor(m => m.Comment, new { Class="comment-body", rows="3", cols="50" })
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="@Localizer["Share review"]" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

@{

    if (TempData["commentOwnership"] != null)
    {

        bool[] commentOwnership = (bool[])TempData["commentOwnership"];
        int i = 0;
        foreach (var item in Model.Reviews)
        {
            <div class="card">
                <div class="row d-flex">
                    <div class="d-flex flex-column">
                        <h6 class="mt-2 mb-0"> @Html.DisplayFor(modelItem => item.GuestId)    </h6>
                    </div>
                    <div class="ml-auto">
                        <p class="text-muted pt-5 pt-sm-3"> @Html.DisplayFor(modelItem => item.Timestamp)    </p>
                    </div>
                </div>
                <div class="boxSize">
                    <p class="content"> @Html.DisplayFor(modelItem => item.Comment)    </p>
                </div>
                 <p id="upvotes-@item.ReviewId">Upvotes: @item.Upvotes</p>
                 <p id="downvotes-@item.ReviewId">Downvotes: @item.Downvotes</p>
                <button onclick="upvote(@item.ReviewId, @item.Upvotes, @item.Downvotes)">Upvote</button>
                <button onclick="downvote(@item.ReviewId, @item.Upvotes, @item.Downvotes)">Downvote</button>
                @if (commentOwnership[i] == true || User.FindFirst("IsAdmin").Value == "true")
                {
                    <form asp-action="Delete">
                        <div class="form-group">
                            <input type="hidden" name="commentId" value="@item.ReviewId" />
                            <input type="submit" value="@SharedLocalizer["Delete"]" class="btn btn-outline-primary" />
                        </div>
                    </form>
                }
                @{
                    i = i + 1;
                }

            </div>
        }
    }
}
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.9/signalr.min.js"></script>
<script>

    const connection = new signalR.HubConnectionBuilder().withUrl("/reviewHub").build();

    connection.start().catch(err => console.error(err.toString()));

    connection.on("UpdateVotes", function (reviewId, upvotes, downvotes) {
        const upvotesElement = document.getElementById(`upvotes-${reviewId}`);
        const downvotesElement = document.getElementById(`downvotes-${reviewId}`);

        if (upvotesElement && downvotesElement) {
            upvotesElement.textContent = `Upvotes: ${upvotes}`;
            downvotesElement.textContent = `Downvotes: ${downvotes}`;
        }
    });

    function upvote(reviewId, currentUpvotes, currentDownvotes) {
        $.ajax({
            url: `/Review/Upvote?reviewId=${reviewId}`,
            type: 'POST',
            success: function () {
               
            },
            error: function (error) {
                console.error('Error during upvote:', error);
            }
        });
    }

    function downvote(reviewId, currentUpvotes, currentDownvotes) {
        $.ajax({
            url: `/Review/Downvote?reviewId=${reviewId}`,
            type: 'POST',
            success: function () {
               
            },
            error: function (error) {
                console.error('Error during downvote:', error);
            }
        });
    }
</script>
<style>
    body {
        color: #000;
        overflow-x: hidden;
    }

    .card {
        border-radius: 5px;
        background-color: #fff;
        padding-left: 60px;
        padding-right: 60px;
        margin-top: 30px;
        padding-top: 30px;
        padding-bottom: 30px;
    }

    td {
        padding-bottom: 10px;
    }

    .content {
        font-size: 18px;
        overflow-wrap: break-word;
    }

    div.boxSize {
        width: auto;
        text-align: left !important;
        word-wrap: break-word;
        overflow-wrap: break-word;
    }

    .warning {
        color: #9F6000;
        background-color: #FEEFB3;
    }

    .success {
        color: #4F8A10;
        background-color: #DFF2BF;
    }
</style>


